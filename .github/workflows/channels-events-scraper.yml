name: Update Playlist

on:
  schedule:
    - cron: "*/30 * * * *"  # Runs every 30 minutes
  workflow_dispatch:

env:
  RETRY_NPM: 3
  RETRY_NPM_DELAY: 10
  RETRY_CHANNELS: 10
  RETRY_CHANNELS_DELAY: 15
  RETRY_MERGE: 5
  RETRY_MERGE_DELAY: 10
  RETRY_README: 3
  RETRY_README_DELAY: 10

jobs:
  fetch_m3u8_job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          printf '\033[36m‚û°Ô∏è  Install dependencies (npm install) ‚Äî attempts: %s\033[0m\n' "${{ env.RETRY_NPM }}"
          success=false
          for i in $(seq 1 ${{ env.RETRY_NPM }}); do
            printf '\033[36m  Attempt %s...\033[0m\n' "$i"
            if npm install 2>error.log; then
              printf '\033[32m  ‚úÖ npm install succeeded on attempt %s\033[0m\n' "$i"
              success=true
              break
            else
              printf '\033[31m  ‚ùå npm install failed (attempt %s). Error output:\033[0m\n' "$i"
              sed -n '1,200p' error.log
              printf '\033[33m  ‚è± Retrying in %s seconds...\033[0m\n' "${{ env.RETRY_NPM_DELAY }}"
              sleep ${{ env.RETRY_NPM_DELAY }}
            fi
          done
          if [ "$success" = false ]; then
            printf '\033[31m‚ùå npm install failed after %s attempts. Exiting.\033[0m\n' "${{ env.RETRY_NPM }}"
            exit 1
          fi

      - name: Get channels
        run: |
          printf '\033[36m‚û°Ô∏è  Get channels (generate-playlist.js) ‚Äî attempts: %s\033[0m\n' "${{ env.RETRY_CHANNELS }}"
          success=false
          for i in $(seq 1 ${{ env.RETRY_CHANNELS }}); do
            printf '\033[36m  Attempt %s...\033[0m\n' "$i"
            if node generate-playlist.js 2>error.log; then
              printf '\033[32m  ‚úÖ generate-playlist.js succeeded on attempt %s\033[0m\n' "$i"
              success=true
              break
            else
              printf '\033[31m  ‚ùå generate-playlist.js failed (attempt %s). Error output:\033[0m\n' "$i"
              sed -n '1,200p' error.log
              printf '\033[33m  ‚è± Retrying in %s seconds...\033[0m\n' "${{ env.RETRY_CHANNELS_DELAY }}"
              sleep ${{ env.RETRY_CHANNELS_DELAY }}
            fi
          done
          if [ "$success" = false ]; then
            printf '\033[31m‚ùå All %s attempts to fetch channels failed. See logs above.\033[0m\n' "${{ env.RETRY_CHANNELS }}"
            exit 1
          fi

      - name: Merge playlists
        run: |
          printf '\033[36m‚û°Ô∏è  Merge playlists (merge.js) ‚Äî attempts: %s\033[0m\n' "${{ env.RETRY_MERGE }}"
          success=false
          for i in $(seq 1 ${{ env.RETRY_MERGE }}); do
            printf '\033[36m  Attempt %s...\033[0m\n' "$i"
            if node merge.js 2>error.log; then
              printf '\033[32m  ‚úÖ merge.js succeeded on attempt %s\033[0m\n' "$i"
              success=true
              break
            else
              printf '\033[31m  ‚ùå merge.js failed (attempt %s). Error output:\033[0m\n' "$i"
              sed -n '1,200p' error.log
              printf '\033[33m  ‚è± Retrying in %s seconds...\033[0m\n' "${{ env.RETRY_MERGE_DELAY }}"
              sleep ${{ env.RETRY_MERGE_DELAY }}
            fi
          done
          if [ "$success" = false ]; then
            printf '\033[31m‚ùå merge.js failed after %s attempts. Exiting.\033[0m\n' "${{ env.RETRY_MERGE }}"
            exit 1
          fi

      - name: Update README
        run: |
          printf '\033[36m‚û°Ô∏è  Update README (update-readme.js) ‚Äî attempts: %s\033[0m\n' "${{ env.RETRY_README }}"
          success=false
          for i in $(seq 1 ${{ env.RETRY_README }}); do
            printf '\033[36m  Attempt %s...\033[0m\n' "$i"
            if node update-readme.js 2>error.log; then
              printf '\033[32m  ‚úÖ update-readme.js succeeded on attempt %s\033[0m\n' "$i"
              success=true
              break
            else
              printf '\033[31m  ‚ùå update-readme.js failed (attempt %s). Error output:\033[0m\n' "$i"
              sed -n '1,200p' error.log
              printf '\033[33m  ‚è± Retrying in %s seconds...\033[0m\n' "${{ env.RETRY_README_DELAY }}"
              sleep ${{ env.RETRY_README_DELAY }}
            fi
          done
          if [ "$success" = false ]; then
            printf '\033[31m‚ùå update-readme.js failed after %s attempts. Exiting.\033[0m\n' "${{ env.RETRY_README }}"
            exit 1
          fi

      - name: Commit & Push changes
        run: |
          printf '\033[36m‚û°Ô∏è  Commit & Push changes\033[0m\n'
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if git diff-index --quiet HEAD; then
            printf '\033[32m‚úÖ No changes to commit\033[0m\n'
          else
            git commit -m "üîÑ Auto-update playlist" || true
            git push
            printf '\033[32m‚úÖ Changes pushed\033[0m\n'
          fi

      - name: Notify Discord on Success
        if: success()
        run: |
          printf '\033[36m‚û°Ô∏è  Notify Discord (success)\033[0m\n'
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"‚úÖ Playlist update succeeded on $(date).\nüîó Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          printf '\033[36m‚û°Ô∏è  Notify Discord (failure)\033[0m\n'
          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"‚ùå Playlist update FAILED on $(date).\nüîó Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
               ${{ secrets.DISCORD_WEBHOOK }}
