const fs = require("fs");
const path = require("path");

// ----- English detection -----
function isEnglish(text) {
  return /^[\x00-\x7F]+$/.test(text);
}

function filterEnglishOnly(lines) {
  const filtered = [];
  let includeNext = false;

  for (let line of lines) {
    if (line.startsWith("#EXTINF")) {
      const nameMatch = line.match(/,(.*)$/);
      const displayName = nameMatch ? nameMatch[1].trim() : "";

      if (isEnglish(displayName)) {
        includeNext = true;
        filtered.push(line);
      } else {
        includeNext = false;
      }
    } else if (line.startsWith("http")) {
      if (includeNext) filtered.push(line);
    } else {
      if (line.startsWith("#EXTM3U")) filtered.push(line);
    }
  }

  return filtered;
}

// ----- Merge playlists -----
function mergePlaylists(files, outputFile) {
  let merged = ["#EXTM3U"];

  for (let file of files) {
    const filePath = path.resolve(file);
    if (!fs.existsSync(filePath)) {
      console.warn(`⚠️  Playlist file not found: ${file}`);
      continue;
    }
    const lines = fs.readFileSync(filePath, "utf-8").split("\n");
    merged = merged.concat(lines.filter(line => !line.startsWith("#EXTM3U")));
  }

  // Apply English-only filter
  const englishOnly = filterEnglishOnly(merged);

  fs.writeFileSync(outputFile, englishOnly.join("\n"), "utf-8");
  console.log(`✅ Merged playlist saved to ${outputFile} (English only)`);
}

// ----- Main execution -----
try {
  // Find all .m3u files in repo
  const playlists = fs.readdirSync(".").filter(f => f.endsWith(".m3u"));
  if (playlists.length === 0) {
    console.error("❌ No .m3u files found in repo");
    process.exit(1);
  }

  // Merge all found playlists into merged.m3u
  mergePlaylists(playlists, "merged.m3u");

} catch (err) {
  console.error("❌ Error running merge.js:", err);
  process.exit(1);
}
